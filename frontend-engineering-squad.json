{
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "extends": [
        "github>SonarSource/renovate-config:default",
        ":dependencyDashboard",
        ":separateMultipleMajorReleases",
        "customManagers:dockerfileVersions"
    ],
    "description": "Schedule once a month on the first weekend of the month at night (0-5 UTC).",
    "schedule": [
        "* 0-5 1-7 * 6,0"
    ],
    "automerge": false,
    "reviewers": [
        "gregaubert",
        "david-cho-lerat-sonarsource",
        "jeremy-davis-sonarsource"
    ],
    "reviewersSampleSize": 1,
    "addLabels": [
        "renovate-dependencies"
    ],
    "vulnerabilityAlerts": {
        "enabled": true,
        "labels": [
            "renovate-vulnerability-alert"
        ]
    },
    "osvVulnerabilityAlerts": true,
    "commitMessagePrefix": "[renovate]",
    "ignorePaths": [
        "**/.yarn/**",
        "**/node_modules/**",
        "**/.nx/**"
    ],
    "prFooter": "This PR has been generated by [Renovate Bot](https://github.com/renovatebot/renovate).\n  - If the PR is green: it means that the dependencies have been update successfully; double check the changelog and merge! When merging don't forget to squash the commit and add prefix the commit message witht the JIRA tickets that has been automatically created.\n  - If the PR is red: something went wrong; double check the changelog and then either:\n    - Fix the issues if the breaking changes are quick to fix or you have the time for it: make sure to add a new commit and not to modify the one from the Renovate\n    - If the required changes are too big: create a JIRA ticket and assign it to the FEE squad, finally update the rennovate.json file to ignore the dependency and document the reason why it has been ignored, the Renovate PR can be closed.\n\nTo know more about the whole process, check our [WebApp dependencies management](https://xtranet-sonarsource.atlassian.net/wiki/spaces/Platform/pages/3222831163/WebApp+dependencies+management) xtranet page.",
    "packageRules": [
        {
            "description": "Wait for 5 days after a release before updating",
            "matchUpdateTypes": [
                "patch",
                "minor",
                "major"
            ],
            "minimumReleaseAge": "5 days"
        },
        {
            "description": "Group all non-major dependencies in the same PR",
            "groupName": "all non-major dependencies",
            "groupSlug": "all-minor-patch",
            "matchPackageNames": [
                "*"
            ],
            "matchUpdateTypes": [
                "patch",
                "minor"
            ],
            "lockFileMaintenance": {
                "enabled": true
            }
        },
        {
            "description": "Group all linter related dependencies in the same PR",
            "extends": [
                "packages:linters"
            ],
            "groupName": "linters dependencies",
            "groupSlug": "linters"
        },
        {
            "description": "Group all tests related dependencies in the same PR",
            "extends": [
                "monorepo:playwright",
                "packages:jsTest"
            ],
            "matchPackageNames": [
                "msw"
            ],
            "groupName": "tests dependencies",
            "groupSlug": "tests"
        },
        {
            "description": "Group all React related dependencies in the same PR",
            "extends": [
                "packages:react"
            ],
            "groupName": "react dependencies",
            "groupSlug": "react"
        },
        {
            "description": "Group all Emotion js related dependencies in the same PR",
            "matchPackageNames": [
                "@emotion/**"
            ],
            "groupName": "emotion dependencies",
            "groupSlug": "emotion"
        },
        {
            "description": "Group all Vite related dependencies in the same PR",
            "extends": [
                "packages:vite"
            ],
            "matchPackageNames": [
                "rollup**"
            ],
            "groupName": "vite dependencies",
            "groupSlug": "vite"
        },
        {
            "description": "Update Typescript dependency in a separate PR",
            "matchPackageNames": [
                "typescript"
            ],
            "groupName": "typescript dependencies",
            "groupSlug": "typescript"
        },
        {
            "description": "Update Yarn dependency in a separate PR",
            "extends": [
                "monorepo:yarn"
            ],
            "groupName": "yarn dependencies",
            "groupSlug": "yarn"
        },
        {
            "description": "Following packages major updates must be approved through the dependency dashboard first.",
            "matchPackageNames": [
                "@types/node",
                "node",
                "yarn"
            ],
            "matchUpdateTypes": [
                "major"
            ],
            "dependencyDashboardApproval": true
        }
    ],
    "customManagers": [
        {
            "description": "Custom manager for netlify.toml files to update the version of a dependency defined with renovate comments.",
            "customType": "regex",
            "managerFilePatterns": [
                "/(^|/|\\.)netlify.toml$/"
            ],
            "matchStrings": [
                "# renovate: datasource=(?<datasource>[a-zA-Z0-9-._]+?) depName=(?<depName>[^\\s]+?)(?: (lookupName|packageName)=(?<packageName>[^\\s]+?))?(?: versioning=(?<versioning>[^\\s]+?))?(?: extractVersion=(?<extractVersion>[^\\s]+?))?(?: registryUrl=(?<registryUrl>[^\\s]+?))?\\s*[A-Za-z0-9_]+?_VERSION\\s?=\\s?[\"']?(?<currentValue>.+?)[\"']?\\s"
            ]
        }
    ]
}
